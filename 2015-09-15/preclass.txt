For the questions regarding the Game of Life, you may want to refer
to the simple implementation included in the "life" subdirectory.
If you run "make glider", you can see a small example of running
the glider pattern for a few generations.

0.  How much time did you spend on this pre-class exercise, and when?

1.  What are one or two points that you found least clear in the
    9/15 slide decks (including the narration)?
    
    On the Particle Systems slides, I don't quite understand "pass particles in a round-robin manner."

2.  In the basic implementation provided, what size board for the Game
    of Life would fit in L3 cache for one of the totient nodes?  Add a
    timer to the code and run on the totient node.  How many cells per
    second can we update for a board that fits in L3 cache?  For a
    board that does not fit?
    
    L3 cache is 15 MB. The board holds two generations, each full of 1 byte characters.
    sqrt(15 * 10^6 / 2) ~ 2738 squares
    
    @ 2000 squares, 10 generations
        2000 * 2000 * 10 / 4.5 = 8.9 million updates / second
    @ 4000 squares, 10 generations
        4000 * 4000 * 10 / 18.0 = 8.9 million updates / second
    @ 8000 squares, 10 generations
        8000 * 8000 * 10 / 66.8 = 9.5 million updates / second
    @ 200 squares, 100 generations
        200 * 200 * 100 / 0.85 s = 4.7 million updates / second
    
    (Am I doing something wrong?)

3.  Assuming that we want to advance time by several generations,
    suggest a blocking strategy that would improve the operational
    intensity of the basic implementation.  Assume the board is
    not dilute, so that we must still consider every cell.  You may
    want to try your hand at implementing your strategy (though you
    need not spend too much time on it).

4.  Comment on what would be required to parallelize this code
    according to the domain decomposition strategy outlined in the
    slides.  Do you think you would see good speedups on one of
    the totient nodes?  Why or why not?
    
    To use domain decomposition, we would need to coordinate and pass boundary data to each node. Data can be sent and received while the rest of the known cells are being computed.
    
    There would seem to be good speedup since depending on generations, not all information needs to be passed back to a head node.

5.  Suppose we want to compute long-range interactions between two
    sets of particles in parallel using the obvious n^2 algorithm in a
    shared-memory setting.  A naive implementation might look like

      struct particle_t {
          double x, y;
          double fx, fy;
      };

      // Update p1 with forces from interaction with p2
      void apply_forces(particle* p1, particle* p2);

      // Assume p is the index of the current processor,
      // part_idx[p] <= i < part_idx[p+1] is the range of
      // particles "owned" by processor p.
      //
      for (int i = part_idx[p]; i < part_idx[p+1]; ++i)
          for (int j = 0; j < npart; ++j)
              apply_forces(particle + i, particle + j);

    Based on what you know about memories and parallel architecture,
    do you see any features of this approach that are likely to lead
    to poor performance?
