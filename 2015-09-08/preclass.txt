Pre-Class Questions:

Consider the following naive row-based N x N matmul (matrix multiplication):

for (i = 0; i < N; i++){
   for (j = 0; j < N; j++){
      tmp = 0
      for (k = 0; k < N; k++)
         tmp += A[i,k] * B[k,j]
      C[i,j] = tmp
   }
}

Suppose data is in double-precision floating point. We are interested in
estimating the memory-based arithmetic intensity (AI) of this code. The
memory-based AI is defined that (# flops) / (# bytes transferred between memory
and cache), and depends on the cache size. Suppose the cache uses a
least-recently-used (LRU) policy for deciding which data to flush when moving
something into an already-full cache.

1. Suppose 16N is significantly larger than the size of our L3 cache. What is
the memory-based AI of this code? (Hint: What is the memory-based AI of just the
innermost loop?)

	In the inner loop, there are 2N flops and 16N bytes loaded into cache at the beginning, AI = 1 / 8. The cache is small enough such that the second level loop would flush all items from B, but not A.

2. Now suppose that the cache is substantially larger than 16N, but
substantially smaller than 8N^2. What is the AI now?

	AI = 2 / 8. A whole matrix will not fit into the cache, so for every round of the second loop it will be loading data.

3. Now suppose the cache is large enough to hold all of A, B, and C. What is the
AI now? (Hint: Writing to a byte of memory not already in the cache incurs two
memory transfers: one to move the data to the cache for writing, and one to move
the written data back to main memory.)

	There will be 2N^3 flops, 16N^2 bytes loaded for A and B, and 16N^2 bytes written for C. The memory-based AI would be 2N / 32.

4. Cache overflowing. On my CPU (Intel i7-4700 HQ), L1, L2, and L3 caches are 32
KB, 256 KB, and 6 MB respectively. What is the largest problem size N that will
fit in each cache? What is the arithmetic intensity associated with each problem
size?

	Using 16N^2 problem size, L1 can fit N = 11, L2 can fit N = 22, L3 can fit almost N = 64. Using 2N / 32, the arithmetic intensity for L1 is 11 / 16, L2 is 11 / 8, L3 is 4.
	
	---
	
	It is possible to fit larger sizes since the cache does not necessarily have to fit all of A, B, and C, and would give different arithmetic intensities.

5. My CPU has 4 cores, each of which can do 8 fused multiply-adds per cycle, has
a clock rate of 2.4 GHz, and a memory bandwidth of 25.6 GB/s. At what arithmetic
intensity does my machine become CPU-bound?

	Total flops = 4 * 8 * 2.4 * 10^9 = 76.8 GFlops / second
	AI = flops / bytes transfered = 76.8 * 10^9 / (25.6 * 10^9) = 3

6. So, for what size range for N will naive matmul be CPU-bound on my machine?

	Using 2N / 32, matmul will be CPU bound at N = 48.

7. So, what will a plot of Flops/sec vs N look like?

	
